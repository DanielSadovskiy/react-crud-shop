{"version":3,"sources":["components/Header.jsx","components/Menu.jsx","components/NotFound.jsx","containers/Products.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Navbar","bg","expand","Brand","href","process","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","Menu","Jumbotron","react_router_dom","to","NotFound","Alert","Heading","Products","state","isLoading","products","_this2","this","fetch","then","res","json","setState","Component","App","components_Header","basename","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73d64a44.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Nav, Button, Form, NavDropdown, FormControl } from \"react-bootstrap\";\nconst Header = () => {\n    return (\n        <div>\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href={process.env.PUBLIC_URL + '/'}>React-Bootstrap</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\n                        <Nav.Link href=\"#link\">Link</Nav.Link>\n                        <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                            <NavDropdown.Divider />\n                            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                    <Form inline>\n                        <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                        <Button variant=\"outline-success\">Search</Button>\n                    </Form>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    )\n}\n\n\nexport default Header;","import React from \"react\";\nimport { Jumbotron } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst Menu = () => {\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Hello, world!</h1>\n                <p>\n                    his is a simple hero unit, a simple jumbotron-style component for calling\n                    extra attention to featured content or information.\n                </p>\n                <Link to=\"/products\">View products</Link>\n            </Jumbotron>\n        </div>\n\n\n    );\n}\nexport default Menu;","import React from \"react\";\nimport { Alert } from \"react-bootstrap\";\n\nconst NotFound = () => {\n    return (\n        <div>\n            <Alert variant=\"warning\">\n                <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n                <p>\n                    Change this and that and try again. Duis mollis, est non commodo\n                    luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.\n                    Cras mattis consectetur purus sit amet fermentum.\n        </p>\n            </Alert>\n        </div>\n\n\n    );\n}\nexport default NotFound;","import React, { Component } from \"react\";\n\n\n                class Products extends Component {\n\n    state = {\n        isLoading: true,\n        products: []\n    };\n    componentDidMount(){\n        const API_PRODUCTS = 'https://my-json-server.typicode.com/DanielSadovskiy/react-crud-shop/db';\n        fetch(API_PRODUCTS)\n            .then(res => res.json())\n            .then(products =>{\n                this.setState({\n                    products,\n                    isLoading:false\n                });\n            })\n    }\n    render() {\n        return (\n            <h1>Products</h1>\n        );          \n    }\n};\nexport default Products;","import React from 'react';\nimport './App.css';\nimport bootstrap from \"bootstrap/dist/css/bootstrap.min.css\";\nimport Header from './components/Header';\nimport Menu from './components/Menu';\nimport { Switch, Route, HashRouter } from \"react-router-dom\";\nimport NotFound from './components/NotFound';\nimport Products from './containers/Products';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <main className=\"container\">\n        <HashRouter basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route exact path=\"/\" component={Menu} />\n            <Route exact path=\"/products\" component={Products} />\n            <Route path=\"*\" component={NotFound} />\n          </Switch>\n        </HashRouter>\n        {/* <Menu /> */}\n      </main>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}